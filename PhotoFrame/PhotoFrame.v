
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module PhotoFrame(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// IR Receiver //////////
	IRDA_RXD,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// Flash //////////
	FL_ADDR,
	FL_CE_N,
	FL_DQ,
	FL_OE_N,
	FL_RST_N,
	FL_RY,
	FL_WE_N,
	FL_WP_N,

	//////////// GPIO, GPIO connect to LTM - 4.3" LCD and Touch //////////
	LTM_ADC_BUSY,
	LTM_ADC_DCLK,
	LTM_ADC_DIN,
	LTM_ADC_DOUT,
	LTM_ADC_PENIRQ_n,
	LTM_B,
	LTM_DEN,
	LTM_G,
	LTM_GREST,
	LTM_HD,
	LTM_NCLK,
	LTM_R,
	LTM_SCEN,
	LTM_SDA,
	LTM_VD 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;

//////////// SEG7 //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// IR Receiver //////////
input 		          		IRDA_RXD;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// Flash //////////
output		    [22:0]		FL_ADDR;
output		          		FL_CE_N;
inout 		     [7:0]		FL_DQ;
output		          		FL_OE_N;
output		          		FL_RST_N;
input 		          		FL_RY;
output		          		FL_WE_N;
output		          		FL_WP_N;

//////////// GPIO, GPIO connect to LTM - 4.3" LCD and Touch //////////
input 		          		LTM_ADC_BUSY;
output		          		LTM_ADC_DCLK;
output		          		LTM_ADC_DIN;
input 		          		LTM_ADC_DOUT;
input 		          		LTM_ADC_PENIRQ_n;
output		     [7:0]		LTM_B;
output		          		LTM_DEN;
output		     [7:0]		LTM_G;
output		          		LTM_GREST;
output		          		LTM_HD;
output		          		LTM_NCLK;
output		     [7:0]		LTM_R;
output		          		LTM_SCEN;
inout 		          		LTM_SDA;
output		          		LTM_VD;

//=======================================================
//  REG/WIRE declarations
//=======================================================

reg					[19:0]	count;
reg								reset_n;
wire								DATA_READY;
wire					[7:0]		IR_KEY;
wire 								writing;

assign LEDG = IR_KEY;
assign LEDR[0] = DATA_READY;
assign LEDR[1] = writing;

//=======================================================
//  Structural coding
//=======================================================

always @(posedge CLOCK_50)
begin
	if (count != 20'hfffff)
	begin
		count <= count + 20'b1;
		reset_n <= 1'b0;
	end
	else
		reset_n <= 1'b1;
end


LTM_TOP ltm_top_ins(
       ///Global signals
       .CLOCK_50(CLOCK_50),
       .RST(reset_n),
       ///LTM_GPIO port
       .LTM_ADC_BUSY(LTM_ADC_BUSY),
       .LTM_ADC_DCLK(LTM_ADC_DCLK),
       .LTM_ADC_DIN(LTM_ADC_DIN),
       .LTM_ADC_DOUT(LTM_ADC_DOUT),
       .LTM_ADC_PENIRQ_n(LTM_ADC_PENIRQ_n),
       .LTM_B(LTM_B),
       .LTM_DEN(LTM_DEN),
       .LTM_G(LTM_G),
       .LTM_GREST(LTM_GREST),
       .LTM_HD(LTM_HD),
       .LTM_NCLK(LTM_NCLK),
       .LTM_R(LTM_R),
       .LTM_SCEN(LTM_SCEN),
       .LTM_SDA(LTM_SDA),
       .LTM_VD(LTM_VD),
       ///7-segs
       .HEX0(HEX0),	
	   .HEX1(HEX1),
	   .HEX2(HEX2),
	   .HEX3(HEX3),
	   .HEX4(HEX4),
	   .HEX5(HEX5),
	   .HEX6(HEX6),
	   .HEX7(HEX7),
	   //sdram
	   .DRAM_ADDR(DRAM_ADDR),
	   .DRAM_BA(DRAM_BA),
	   .DRAM_CAS_N(DRAM_CAS_N),
	   .DRAM_CKE(DRAM_CKE),
	   .DRAM_CLK(DRAM_CLK),
	   .DRAM_CS_N(DRAM_CS_N),
	   .DRAM_DQ(DRAM_DQ),
	   .DRAM_DQM(DRAM_DQM),
	   .DRAM_RAS_N(DRAM_RAS_N),
	   .DRAM_WE_N(DRAM_WE_N),
	   //flash
	   .FL_ADDR(FL_ADDR),
	   .FL_CE_N(FL_CE_N),
	   .FL_DQ(FL_DQ),
	   .FL_OE_N(FL_OE_N),
	   .FL_RST_N(FL_RST_N),
	   .FL_RY(FL_RY),
	   .FL_WE_N(FL_WE_N),
	   .FL_WP_N(FL_WP_N),
		.IR_READY(DATA_READY),
		.IR_KEY(IR_KEY),
		.WRITING(writing),
		.MODE(LEDR[4:3]),
		.MENU(LEDR[7]),
		.INT(LEDR[17:14]),
       );
		 
IR_Receiver ir(
		.iCLK(CLOCK_50),         //clk 50MHz
		.iRST_n(reset_n),       //reset					
		.iIRDA(IRDA_RXD),        //IR code input
		.iWRITING(writing),
		.oDATA_READY(DATA_READY),  //data ready
		.oKEY(IR_KEY)         //decode data output
);

endmodule
