
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module IR_LCD(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// LCD //////////
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// IR Receiver //////////
	IRDA_RXD,
	RR,
	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// LCD //////////
output		          		LCD_BLON;
inout 		     [7:0]		LCD_DATA;
output		          		LCD_EN;
output		          		LCD_ON;
output		          		LCD_RS;
output		          		LCD_RW;

//////////// IR Receiver //////////
input 		          		IRDA_RXD;
output 							RR;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [31:0]		DRAM_DQ;
output		     [3:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire								User_GPIO_PWM;
wire								User_Pio;
wire								Clk_Core;
wire								Clk_Sdram;
assign							DRAM_CLK = Clk_Sdram;

//=======================================================
//  Structural coding
//=======================================================

//  Reset_N Delay
reg 	[19:0] 	Count;
reg 				Reset_N;
always@(posedge CLOCK_50)	begin
	if(Count != 20'hFFFFF)	begin
		Count <= Count + 1;
		Reset_N <= 1'b0;
	end
	else Reset_N <= 1'b1;
end

PLL	PLL_inst (
	.inclk0 ( CLOCK_50 ),
	.c0 ( Clk_Core ),
	.c1 ( Clk_Sdram )
	);


 kernel u0 (
	  .clk_clk                              (Clk_Core),                              //                          clk.clk
	  .ir_receive_0_conduit_end_0_export_ir   (IRDA_RXD),   //   ir_receive_0_conduit_end_0.export_ir
	  .ir_receive_0_conduit_end_0_export_rr   (RR),   //                             .export_rr
	  .ir_receive_0_conduit_end_0_export_led  (LEDR[10]),  //                             .export_led
	  .ir_receive_0_conduit_end_0_export_data (LEDR[7:0]), //                             .export_data
	  .ir_receive_0_conduit_end_0_export_buf  (LEDG[7:0]),  //                             .export_buf
	  .lcd_demo_0_conduit_end_0_export_data (LCD_DATA), //     lcd_demo_0_conduit_end_0.export_data
	  .lcd_demo_0_conduit_end_0_export_rw   (LCD_RW),   //                             .export_rw
	  .lcd_demo_0_conduit_end_0_export_en   (LCD_EN),   //                             .export_en
	  .lcd_demo_0_conduit_end_0_export_rs   (LCD_RS),   //                             .export_rs
	  .lcd_demo_0_conduit_end_0_export_blon (LCD_BLON), //                             .export_blon
	  .lcd_demo_0_conduit_end_0_export_on   (LCD_ON),   //                             .export_on
	  .new_sdram_controller_0_wire_addr     (DRAM_ADDR),     //  new_sdram_controller_0_wire.addr
	  .new_sdram_controller_0_wire_ba       (DRAM_BA),       //                             .ba
	  .new_sdram_controller_0_wire_cas_n    (DRAM_CAS_N),    //                             .cas_n
	  .new_sdram_controller_0_wire_cke      (DRAM_CKE),      //                             .cke
	  .new_sdram_controller_0_wire_cs_n     (DRAM_CS_N),     //                             .cs_n
	  .new_sdram_controller_0_wire_dq       (DRAM_DQ),       //                             .dq
	  .new_sdram_controller_0_wire_dqm      (DRAM_DQM),      //                             .dqm
	  .new_sdram_controller_0_wire_ras_n    (DRAM_RAS_N),    //                             .ras_n
	  .new_sdram_controller_0_wire_we_n     (DRAM_WE_N),     //                             .we_n
	  .pio_0_external_connection_1_export   (RR),     //  pio_0_external_connection_1.export
	  .pio_0_external_connection_export     (User_Pio),     //    pio_0_external_connection.export
	  .reset_reset_n                        (Reset_N),                        //                        reset.reset_n
	  .user_gio_pwm_0_conduit_end_0_export  (User_GPIO_PWM)   // user_gio_pwm_0_conduit_end_0.export
 );

assign LEDR[17] = User_Pio;
assign LEDR[16] = User_GPIO_PWM;

endmodule
